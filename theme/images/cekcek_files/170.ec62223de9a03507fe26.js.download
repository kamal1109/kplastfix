(window.webpackJsonp=window.webpackJsonp||[]).push([[170],{mN2R:function(t,r,o){"use strict";o.d(r,"a",(function(){return u})),o.d(r,"b",(function(){return k}));o("bSeV");var e=o("wVAQ"),n=o("Wt0y"),s=o("txPx");o("NNtz");const i=Object(s.getLogger)("Support.Api"),a=window.DATA_ISSUES_HOST,c=void 0!==a?a+"/api/v1":void 0;function u(){return void 0!==c}function h(t){if(!u())throw new Error("Helpdesk host is not defined.");return`${c}${t}`}const d={count:()=>({method:"GET",url:h("/tickets/count_by_userid")}),list:()=>({method:"GET",url:h("/tickets/by_userid")}),get:t=>({method:"GET",url:h("/tickets/"+t)}),send:()=>({method:"POST",url:h("/tickets/save")}),close:()=>({method:"POST",url:h("/tickets/close")}),getSatisfactionRatings:t=>({method:"GET",url:h(`/tickets/${t}/get_satisfaction_ratings`)}),addSatisfactionRating:t=>({method:"POST",url:h(`/tickets/${t}/add_satisfaction_rating`)})},l={list:t=>({method:"GET",url:h(`/tickets/${t}/comments`)}),send:()=>({method:"POST",url:h("/tickets/add_comment")})},w={get:()=>({method:"GET",url:h("/unreads/get")}),update:()=>({method:"PATCH",url:h("/unreads/update")}),drop:()=>({method:"PATCH",url:h("/unreads/drop")})},g={getPopulars:t=>({method:"GET",url:h("/solutions/popular/"+t)}),getTree:t=>({method:"GET",url:h("/solutions/get_solutions_tree/"+t)}),search:(t,r)=>({method:"GET",url:h(`/solutions/search/${t}?term=${r}`)}),get:(t,r)=>({method:"GET",url:h(`/solutions/${t}/${r}`)})},f={get:()=>({method:"GET",url:h("/business_hours")})},E={get:t=>({method:"GET",url:h("/freshdeskId/"+t)})};function m(t,r,o){const s={method:t,credentials:"include"};return s.headers=new Headers,Object(n.isProd)()||(s.headers.set("X-UserId",String(window.user.id)),s.headers.set("X-UserPerm",JSON.stringify({is_pro_admin:1,is_support_unreads_admin:1}))),void 0!==o&&(s.headers.set("Content-Type","application/json"),s.body=JSON.stringify(o)),Object(e.fetch)(r,s)}async function y(t){const r=await t.text();if(!t.ok)throw new Error(`Response was not OK. Status: ${t.status}. Content: ${r}`);return r}async function p(t){const r=await y(t);try{return JSON.parse(r)}catch(o){throw new Error(`Failed to parse JSON response (at ${t.url}). Original error: "${o.name}: ${o.message}". Tried to parse: ${r}`)}}const k={tickets:{count:async function(){const{method:t,url:r}=d.count();try{const o=await m(t,r);return await p(o)}catch(o){throw i.logError("Error while fetching tickets count. "+o),o}},list:async function(){const{method:t,url:r}=d.list();try{const o=await m(t,r);return await p(o)}catch(o){throw i.logError("Error while fetching tickets. "+o),o}},get:async function(t){const{method:r,url:o}=d.get(t);try{const t=await m(r,o);return await p(t)}catch(e){throw i.logError(`Error while fetching ticket ${t}. `+e),e}},send:async function(t){const{method:r,url:o}=d.send();try{const e=await m(r,o,t);return await p(e)}catch(e){throw i.logError("Error while sending new ticket. "+e),e}},close:async function(t){const{method:r,url:o}=d.close();try{const e=await m(r,o,t);return await p(e)}catch(e){
throw i.logError(`Error while fetching ticket ${t.reportId}. `+e),e}},getSatisfactionRatings:async function(t){const{method:r,url:o}=d.getSatisfactionRatings(t);try{const t=await m(r,o);return await p(t)}catch(e){throw i.logError("Error while fetching ticket satisfaction ratings. "+e),e}},addSatisfactionRating:async function(t,r){const{method:o,url:e}=d.addSatisfactionRating(t);try{const t=await m(o,e,r);return await p(t)}catch(n){throw i.logError("Error while sending new ticket satisfaction rating. "+n),n}}},conversations:{list:async function(t){const{method:r,url:o}=l.list(t);try{const t=await m(r,o);return await p(t)}catch(e){throw i.logError("Error while fetching ticket conversations. "+e),e}},send:async function(t){const{method:r,url:o}=l.send();try{const e=await m(r,o,t);return await p(e)}catch(e){throw i.logError("Error while sending new ticket note. "+e),e}}},unreads:{get:async function(){const{method:t,url:r}=w.get();try{const o=await m(t,r);return await p(o)}catch(o){throw i.logWarn("Error while fetching support unreads count. "+o),o}},update:async function(t){const{method:r,url:o}=w.update();try{const e=await m(r,o,t);await y(e)}catch(e){throw i.logError("Error while updating ticket conversations unreads. "+e),e}},drop:async function(t){const{method:r,url:o}=w.drop();try{const e=await m(r,o,t);await y(e)}catch(e){throw i.logError("Error while dropping ticket conversations unreads. "+e),e}}},solutions:{getPopulars:async function(t){const{method:r,url:o}=g.getPopulars(t);try{const t=await m(r,o);return await p(t)}catch(e){throw i.logError("Error while fetching popular solutions. "+e),e}},getTree:async function(t){const{method:r,url:o}=g.getTree(t);try{const t=await m(r,o);return await p(t)}catch(e){throw i.logError("Error while fetching solutions tree. "+e),e}},search:async function(t,r){const{method:o,url:e}=g.search(t,r);try{const t=await m(o,e);return await p(t)}catch(n){throw i.logError("Error while searching solutions. "+n),n}},get:async function(t,r){const{method:o,url:e}=g.get(t,r);try{const t=await m(o,e);return await p(t)}catch(n){throw i.logError(`Error while fetching solution ${t}. `+n),n}}},businessHours:{get:async function(){const{method:t,url:r}=f.get();try{const o=await m(t,r);return await p(o)}catch(o){throw i.logError("Error while fetching support business hours. "+o),o}}},freshdeskId:{get:async function(t){const{method:r,url:o}=E.get(t);try{const t=await m(r,o);return await p(t)}catch(e){throw i.logWarn("Error while fetching user Freshdesk ID. "+e),e}}}}}}]);